<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="korit.com.make_fitness.mapper.MasterMapper">
    <resultMap id="ManagerResultMap" type="korit.com.make_fitness.dto.response.RespManagerDto">
        <id property="managerId" column="manager_id" />
        <result property="nickname" column="nickname" />
        <result property="gender" column="gender" />
        <result property="ph" column="ph" />
        <result property="classMemberCount" column="class_member_count" />
        <result property="classSessionCount" column="class_session_count" />
    </resultMap>

    <update id="updateRoleName" keyProperty="userId" useGeneratedKeys="true">
        update
            user_tb
        set
            role_name = #{roleName}
        where
            user_id = #{userId}
    </update>

    <delete id="deleteManager" parameterType="int">
        delete from
            user_tb
        where
            roleName = #{roleName} and user_id = #{userId}
    </delete>

    <select id="findManager" resultMap="ManagerResultMap">
        SELECT
            u.user_id AS manager_id,
            u.nickname AS nickname,
            u.gender AS gender,
            u.ph AS ph,
            COUNT(r.reservation_id) AS class_member_count,
            COUNT(c.class_id) AS class_session_count,
            COALESCE(DATE_FORMAT(c.class_time, '%Y-%m'), 'NO_CLASS') AS class_month
        FROM user_tb u
            LEFT JOIN class_tb c ON u.user_id = c.user_id
            LEFT JOIN reservation_tb r ON r.class_id = c.class_id
            LEFT JOIN membership_tb m ON r.membership_id = m.membership_id
        WHERE u.role_name = 'ROLE_MANAGER'
        AND (DATE_FORMAT(c.class_time, '%Y-%m') = DATE_FORMAT(#{classTime}, '%Y-%m'))
        GROUP BY u.user_id, class_month
        ORDER BY u.user_id, class_month
    </select>

    <select id="findByNickname" resultType="korit.com.make_fitness.dto.response.RespMemberListDto">
        SELECT
            u.nickname,
            u.ph,
            COALESCE(p.promotion_name, '') AS promotionName,
            COALESCE(m.promotion_session_count, 0) AS promotionSessionCount,
            COALESCE(m.expired_date, NOW()) AS expiredDate
        FROM
            user_tb u
            LEFT JOIN membership_tb m ON m.user_id = u.user_id
            LEFT JOIN promotion_tb p ON m.promotion_id = p.promotion_id
        WHERE
            u.nickname LIKE CONCAT('%', #{name}, '%')
    </select>

    <select id="findByStartAndEndDate" resultType="korit.com.make_fitness.dto.response.RespSalesDto">
        WITH RECURSIVE date_series AS (

        SELECT DATE(STR_TO_DATE(#{startDate}, '%Y-%m-%d')) AS ds_date
        UNION ALL

        SELECT ds_date + INTERVAL 1 DAY
        FROM date_series

        WHERE not ds_date = LAST_DAY(STR_TO_DATE(#{endDate}, '%Y-%m-%d'))
        )
        SELECT
        ds.ds_date + INTERVAL 1 DAY AS date,
        IFNULL(SUM(pt.payment_amount), 0) AS total_amount,
        SUM(IF(pmt2.promotion_id IS NOT NULL, pt.payment_amount, 0)) AS pt_total_amount,
        SUM(IF(pmt.promotion_id IS NOT NULL, pt.payment_amount, 0)) AS plt_total_amount,
        SUM(IF(pmt3.promotion_id IS NOT NULL, pt.payment_amount, 0)) AS ht_total_amount
        FROM
        date_series ds
        LEFT OUTER JOIN pay_tb pt
        ON ds.ds_date = DATE(pt.created_at)
        LEFT OUTER JOIN promotion_tb pmt
        ON pmt.promotion_id = pt.promotion_id
        AND pmt.class_subject_id = 2
        LEFT OUTER JOIN promotion_tb pmt2
        ON pmt2.promotion_id = pt.promotion_id
        AND pmt2.class_subject_id = 1
        LEFT OUTER JOIN promotion_tb pmt3
        ON pmt3.promotion_id = pt.promotion_id
        AND pmt3.class_subject_id = 0
        GROUP BY
        ds.ds_date
        ORDER BY
        ds.ds_date;
    </select>

</mapper>