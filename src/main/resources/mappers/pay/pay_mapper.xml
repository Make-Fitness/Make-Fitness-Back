<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="korit.com.make_fitness.mapper.PayMapper">

    <resultMap id="SalesResultMap" type="korit.com.make_fitness.dto.request.SalesDto">
        <result column="date" property="date"/>
        <result column="total_amount" property="totalAmount"/>
        <result column="pt_total_amount" property="ptTotalAmount"/>
        <result column="plt_total_amount" property="pltTotalAmount"/>
        <result column="ht_total_amount" property="htTotalAmount"/>
    </resultMap>

    <insert id="insert" keyProperty="payId" useGeneratedKeys="true">
        insert into pay_tb
        (
            uuid,
            user_id,
            manager_id,
            promotion_id,
            payment_method,
            payment_amount,
            created_at,
            updated_at
        )
        select
            #{uuid},
            #{userId},
            #{managerId},
            pt.promotion_id,
            #{paymentMethod},
            pt.price,
            now(),
            now()
        from
            promotion_tb pt
        where
            pt.promotion_id = #{promotionId}
    </insert>
    <select id="findSales" resultMap="SalesResultMap">
        WITH RECURSIVE date_series AS (
        -- 시작 날짜를 기준으로, 첫 번째 날짜부터 마지막 날짜까지 생성
        SELECT DATE(STR_TO_DATE(#{startDate}, '%Y-%m-%d')) AS ds_date
        UNION ALL

        SELECT ds_date + INTERVAL 1 DAY
        FROM date_series

        WHERE not ds_date = LAST_DAY(STR_TO_DATE(#{startDate}, '%Y-%m-%d'))
        )
        SELECT
        ds.ds_date + INTERVAL 1 DAY AS date,
        IFNULL(SUM(pt.payment_amount), 0) AS total_amount,
        SUM(IF(pmt2.promotion_id IS NOT NULL, pt.payment_amount, 0)) AS pt_total_amount,
        SUM(IF(pmt.promotion_id IS NOT NULL, pt.payment_amount, 0)) AS plt_total_amount,
        SUM(IF(pmt3.promotion_id IS NOT NULL, pt.payment_amount, 0)) AS ht_total_amount
        FROM
        date_series ds
        LEFT OUTER JOIN pay_tb pt
        ON ds.ds_date = DATE(pt.created_at)
        LEFT OUTER JOIN promotion_tb pmt
        ON pmt.promotion_id = pt.promotion_id
        AND pmt.class_subject_id = 2
        LEFT OUTER JOIN promotion_tb pmt2
        ON pmt2.promotion_id = pt.promotion_id
        AND pmt2.class_subject_id = 1
        LEFT OUTER JOIN promotion_tb pmt3
        ON pmt3.promotion_id = pt.promotion_id
        AND pmt3.class_subject_id NOT IN (1, 2)
        GROUP BY
        ds.ds_date
        ORDER BY
        ds.ds_date;
    </select>
</mapper>